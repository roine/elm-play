Elm.Decoding = Elm.Decoding || {};
Elm.Decoding.make = function (_elm) {
   "use strict";
   _elm.Decoding = _elm.Decoding || {};
   if (_elm.Decoding.values) return _elm.Decoding.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Components$Date = Elm.Components.Date.make(_elm),
   $Components$Fieldset = Elm.Components.Fieldset.make(_elm),
   $Components$Grid = Elm.Components.Grid.make(_elm),
   $Components$System = Elm.Components.System.make(_elm),
   $Components$Text = Elm.Components.Text.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Http = Elm.Http.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $Json$Decode$Extra = Elm.Json.Decode.Extra.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var decodeValidation = A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],$Json$Decode.succeed($Components$System.Validation),A2($Json$Decode._op[":="],"path_name",$Json$Decode.string)),
   A2($Json$Decode._op[":="],"short_name",$Json$Decode.string)),
   $Json$Decode.maybe(A2($Json$Decode._op[":="],"required",$Json$Decode.bool))),
   $Json$Decode.maybe(A2($Json$Decode._op[":="],"maxlength",$Json$Decode.$int))),
   $Json$Decode.maybe(A2($Json$Decode._op[":="],"format",$Json$Decode.string))),
   $Json$Decode.maybe(A2($Json$Decode._op[":="],"min",$Json$Decode.$int))),
   $Json$Decode.maybe(A2($Json$Decode._op[":="],"max",$Json$Decode.$int))),
   A2($Json$Decode._op[":="],"scope",$Json$Decode.string)),
   A2($Json$Decode._op[":="],"type",$Json$Decode.string));
   var decodeRepository = A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],$Json$Decode.succeed($Components$System.Repository),A2($Json$Decode._op[":="],"path_name",$Json$Decode.string)),
   A2($Json$Decode._op[":="],"path",$Json$Decode.list($Json$Decode.string))),
   A2($Json$Decode._op[":="],"class_name",$Json$Decode.string)),
   A2($Json$Decode._op[":="],"short_name",$Json$Decode.string));
   var decodeComponentBase = function (f) {
      return A2($Json$Decode$Extra._op["|:"],
      A2($Json$Decode$Extra._op["|:"],
      A2($Json$Decode$Extra._op["|:"],
      A2($Json$Decode$Extra._op["|:"],
      A2($Json$Decode$Extra._op["|:"],
      A2($Json$Decode$Extra._op["|:"],
      A2($Json$Decode$Extra._op["|:"],
      A2($Json$Decode$Extra._op["|:"],
      A2($Json$Decode$Extra._op["|:"],
      A2($Json$Decode$Extra._op["|:"],f,A2($Json$Decode._op[":="],"path_name",$Json$Decode.string)),
      A2($Json$Decode._op[":="],"short_name",$Json$Decode.string)),
      A2($Json$Decode._op[":="],"path",$Json$Decode.list($Json$Decode.string))),
      A2($Json$Decode._op[":="],"position",$Json$Decode.$int)),
      A2($Json$Decode._op[":="],"type",$Json$Decode.string)),
      A2($Json$Decode._op[":="],"label_inside_input",$Json$Decode.bool)),
      A2($Json$Decode._op[":="],"repository",decodeRepository)),
      A2($Json$Decode._op[":="],"validation",decodeValidation)),
      A2($Json$Decode._op[":="],"label",$Json$Decode.string)),
      A2($Json$Decode._op[":="],"label_visible",$Json$Decode.bool));
   };
   var decodeComponentToggle = A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   decodeComponentBase($Json$Decode.succeed($Components$System.ComponentToggle)),
   A2($Json$Decode._op[":="],"placeholder_label",$Json$Decode.string)),
   A2($Json$Decode._op[":="],
   "options",
   $Json$Decode.list(A3($Json$Decode.object2,
   $Components$System.ValueLabel,
   A2($Json$Decode._op[":="],"label",$Json$Decode.string),
   A2($Json$Decode._op[":="],"value",$Json$Decode.bool)))));
   var decodeComponentTagsInput = A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   decodeComponentBase($Json$Decode.succeed($Components$System.ComponentTagsInput)),
   A2($Json$Decode._op[":="],"placeholder_label",$Json$Decode.string)),
   A2($Json$Decode._op[":="],"add_button_label",$Json$Decode.string));
   var decodeComponentText = A2($Json$Decode$Extra._op["|:"],
   decodeComponentBase($Json$Decode.succeed($Components$System.ComponentText)),
   A2($Json$Decode._op[":="],"placeholder_label",$Json$Decode.string));
   var decodeComponentDatePicker = decodeComponentBase($Json$Decode.succeed($Components$System.ComponentDatePicker));
   var decodeComponentTextArea = A2($Json$Decode$Extra._op["|:"],
   decodeComponentBase($Json$Decode.succeed($Components$System.ComponentTextArea)),
   A2($Json$Decode._op[":="],"placeholder_label",$Json$Decode.string));
   var decodeComponentRadioButtons = A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   decodeComponentBase($Json$Decode.succeed($Components$System.ComponentRadioButtons)),
   A2($Json$Decode._op[":="],"placeholder_label",$Json$Decode.string)),
   A2($Json$Decode._op[":="],
   "options",
   $Json$Decode.list(A3($Json$Decode.object2,
   $Components$System.ValueLabel,
   A2($Json$Decode._op[":="],"label",$Json$Decode.string),
   A2($Json$Decode._op[":="],"value",$Json$Decode.string)))));
   var decodeComponentNumber = A2($Json$Decode$Extra._op["|:"],
   decodeComponentBase($Json$Decode.succeed($Components$System.ComponentNumber)),
   A2($Json$Decode._op[":="],"placeholder_label",$Json$Decode.string));
   var decodeComponentSelect = A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   decodeComponentBase($Json$Decode.succeed($Components$System.ComponentSelect)),
   A2($Json$Decode._op[":="],"placeholder_label",$Json$Decode.string)),
   A2($Json$Decode._op[":="],"default_value",$Json$Decode.string)),
   A2($Json$Decode._op[":="],
   "options",
   $Json$Decode.list(A3($Json$Decode.object2,
   $Components$System.ValueLabel,
   A2($Json$Decode._op[":="],"label",$Json$Decode.string),
   A2($Json$Decode._op[":="],"value",$Json$Decode.string)))));
   var componentTypeInfo = function (type$) {
      var _p0 = type$;
      switch (_p0)
      {case "Fieldset": return A2($Json$Decode.map,$Components$System.Fieldset,decodeComponentFieldset);
         case "TagsInput": return A2($Json$Decode.map,$Components$System.TagsInput,decodeComponentTagsInput);
         case "Grid": return A2($Json$Decode.map,$Components$System.Grid,decodeComponentGrid);
         case "Toggle": return A2($Json$Decode.map,$Components$System.Toggle,decodeComponentToggle);
         case "Text": return A2($Json$Decode.map,$Components$System.Text,decodeComponentText);
         case "DatePicker": return A2($Json$Decode.map,$Components$System.DatePicker,decodeComponentDatePicker);
         case "TextArea": return A2($Json$Decode.map,$Components$System.TextArea,decodeComponentTextArea);
         case "RadioButtons": return A2($Json$Decode.map,$Components$System.RadioButtons,decodeComponentRadioButtons);
         case "Number": return A2($Json$Decode.map,$Components$System.Number,decodeComponentNumber);
         case "Select": return A2($Json$Decode.map,$Components$System.Select,decodeComponentSelect);
         default: return $Json$Decode.fail(A2($Basics._op["++"],"not found: ",A2($Debug.log,"fail",type$)));}
   };
   var decodeComponentFieldset = A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],$Json$Decode.succeed($Components$System.ComponentFieldset),A2($Json$Decode._op[":="],"path_name",$Json$Decode.string)),
   A2($Json$Decode._op[":="],"short_name",$Json$Decode.string)),
   A2($Json$Decode._op[":="],"path",$Json$Decode.list($Json$Decode.string))),
   A2($Json$Decode._op[":="],"position",$Json$Decode.$int)),
   A2($Json$Decode._op[":="],"type",$Json$Decode.string)),
   A2($Json$Decode._op[":="],"label",$Json$Decode.string)),
   A2($Json$Decode._op[":="],"label_visible",$Json$Decode.bool)),
   A2($Json$Decode._op[":="],"components",$Json$Decode.list($Json$Decode$Extra.lazy(function (_p1) {    return decodeComponentType;}))));
   var decodeComponentType = A2($Json$Decode.andThen,A2($Json$Decode._op[":="],"type",$Json$Decode.string),componentTypeInfo);
   var decodeComponentGrid = A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],$Json$Decode.succeed($Components$System.ComponentGrid),A2($Json$Decode._op[":="],"path_name",$Json$Decode.string)),
   A2($Json$Decode._op[":="],"short_name",$Json$Decode.string)),
   A2($Json$Decode._op[":="],"path",$Json$Decode.list($Json$Decode.string))),
   A2($Json$Decode._op[":="],"position",$Json$Decode.$int)),
   A2($Json$Decode._op[":="],"type",$Json$Decode.string)),
   A2($Json$Decode._op[":="],"components",$Json$Decode.list($Json$Decode$Extra.lazy(function (_p2) {    return decodeComponentType;}))));
   var decodeInitialData = A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],$Json$Decode.succeed($Components$System.Datum),A2($Json$Decode._op[":="],"path",$Json$Decode.list($Json$Decode.string))),
   A2($Json$Decode._op[":="],"value",$Json$Decode.string));
   var decodeBase = function (f) {
      return A2($Json$Decode$Extra._op["|:"],
      A2($Json$Decode$Extra._op["|:"],
      A2($Json$Decode$Extra._op["|:"],
      A2($Json$Decode$Extra._op["|:"],f,A2($Json$Decode._op[":="],"path_name",$Json$Decode.string)),
      A2($Json$Decode._op[":="],"short_name",$Json$Decode.string)),
      $Json$Decode.oneOf(_U.list([A2($Json$Decode._op[":="],"label",$Json$Decode.string),$Json$Decode.succeed("")]))),
      A2($Json$Decode._op[":="],"path",$Json$Decode.list($Json$Decode.string)));
   };
   var decodeSections = A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],decodeBase($Json$Decode.succeed($Components$System.Section)),A2($Json$Decode._op[":="],"template",$Json$Decode.string)),
   A2($Json$Decode._op[":="],"position",$Json$Decode.$int)),
   A2($Json$Decode._op[":="],"components",$Json$Decode.list(decodeComponentType)));
   var decodeHeadConfiguration = A2($Json$Decode$Extra._op["|:"],
   decodeBase($Json$Decode.succeed($Components$System.Configuration)),
   A2($Json$Decode._op[":="],"sections",$Json$Decode.list(decodeSections)));
   var update = F2(function (action,model) {
      var _p3 = action;
      if (_p3.ctor === "NoOp") {
            return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         } else {
            var _p4 = _p3._0;
            if (_p4.ctor === "Just") {
                  var _p5 = _p4._0;
                  return {ctor: "_Tuple2",_0: _U.update(model,{configuration: _p5.configuration,report_data: _p5.report_data}),_1: $Effects.none};
               } else {
                  return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
               }
         }
   });
   var renderComponent = F2(function (address,component) {
      var _p6 = component;
      switch (_p6.ctor)
      {case "TagsInput": return A2($Components$Text.view,address,_p6._0);
         case "Fieldset": return A3($Components$Fieldset.view,address,_p6._0,renderComponent);
         case "Grid": return A3($Components$Grid.view,address,_p6._0,renderComponent);
         case "Toggle": return A2($Components$Text.view,address,_p6._0);
         case "Text": return A2($Components$Text.view,address,_p6._0);
         case "DatePicker": return A2($Components$Date.view,address,_p6._0);
         case "TextArea": return A2($Components$Text.view,address,_p6._0);
         case "RadioButtons": return A2($Components$Text.view,address,_p6._0);
         case "Number": return A2($Components$Text.view,address,_p6._0);
         default: return A2($Components$Text.view,address,_p6._0);}
   });
   var renderSection = F2(function (address,section) {
      return A2($Html.div,_U.list([]),_U.list([$Html.text("section"),A2($Html.div,_U.list([]),A2($List.map,renderComponent(address),section.components))]));
   });
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([]),
      _U.list([$Html.text($Basics.toString(model)),A2($Html.div,_U.list([]),A2($List.map,renderSection(address),model.configuration.sections))]));
   });
   var configurationModel = {path_name: "",label: "",short_name: "",path: _U.list([]),sections: _U.list([])};
   var AddConfiguration = function (a) {    return {ctor: "AddConfiguration",_0: a};};
   var NoOp = {ctor: "NoOp"};
   var Model = F2(function (a,b) {    return {configuration: a,report_data: b};});
   var decodeConfiguration = A2($Json$Decode.object1,
   $Basics.identity,
   A2($Json$Decode._op[":="],
   "result",
   A3($Json$Decode.object2,
   Model,
   A2($Json$Decode._op[":="],"configuration",decodeHeadConfiguration),
   A2($Json$Decode._op[":="],"initial_data",$Json$Decode.list(decodeInitialData)))));
   var fetchConfiguration = $Effects.task(A2($Task.map,AddConfiguration,$Task.toMaybe(A2($Http.get,decodeConfiguration,"/configuration.json"))));
   var init = {ctor: "_Tuple2",_0: A2(Model,configurationModel,_U.list([])),_1: fetchConfiguration};
   var app = $StartApp.start({update: update,view: view,init: init,inputs: _U.list([])});
   var main = app.html;
   var tasks = Elm.Native.Task.make(_elm).performSignal("tasks",app.tasks);
   return _elm.Decoding.values = {_op: _op
                                 ,Model: Model
                                 ,NoOp: NoOp
                                 ,AddConfiguration: AddConfiguration
                                 ,app: app
                                 ,main: main
                                 ,init: init
                                 ,configurationModel: configurationModel
                                 ,view: view
                                 ,renderSection: renderSection
                                 ,renderComponent: renderComponent
                                 ,update: update
                                 ,fetchConfiguration: fetchConfiguration
                                 ,decodeConfiguration: decodeConfiguration
                                 ,decodeBase: decodeBase
                                 ,decodeInitialData: decodeInitialData
                                 ,decodeHeadConfiguration: decodeHeadConfiguration
                                 ,decodeRepository: decodeRepository
                                 ,decodeValidation: decodeValidation
                                 ,decodeSections: decodeSections
                                 ,decodeComponentType: decodeComponentType
                                 ,componentTypeInfo: componentTypeInfo
                                 ,decodeComponentBase: decodeComponentBase
                                 ,decodeComponentGrid: decodeComponentGrid
                                 ,decodeComponentFieldset: decodeComponentFieldset
                                 ,decodeComponentToggle: decodeComponentToggle
                                 ,decodeComponentTagsInput: decodeComponentTagsInput
                                 ,decodeComponentText: decodeComponentText
                                 ,decodeComponentDatePicker: decodeComponentDatePicker
                                 ,decodeComponentTextArea: decodeComponentTextArea
                                 ,decodeComponentRadioButtons: decodeComponentRadioButtons
                                 ,decodeComponentNumber: decodeComponentNumber
                                 ,decodeComponentSelect: decodeComponentSelect};
};