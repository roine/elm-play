Elm.RoutePlay = Elm.RoutePlay || {};
Elm.RoutePlay.make = function (_elm) {
   "use strict";
   _elm.RoutePlay = _elm.RoutePlay || {};
   if (_elm.RoutePlay.values) return _elm.RoutePlay.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Home = Elm.Home.make(_elm),
   $Html = Elm.Html.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $RouteParser = Elm.RouteParser.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $System = Elm.System.make(_elm),
   $Users = Elm.Users.make(_elm);
   var _op = {};
   var init = {route: "/loading",counter: 0,params: {id: 0},users: $Users.init,home: $Home.init};
   var update = F2(function (action,model) {
      var _p0 = action;
      switch (_p0.ctor)
      {case "NoOp": return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         case "UpdateRouteString": return {ctor: "_Tuple2",_0: _U.update(model,{route: _p0._0}),_1: $Effects.none};
         case "UsersForward": return {ctor: "_Tuple2",_0: _U.update(model,{users: A2($Users.update,_p0._0,model.users)}),_1: $Effects.none};
         default: return {ctor: "_Tuple2",_0: _U.update(model,{home: A2($Home.update,_p0._0,model.home)}),_1: $Effects.none};}
   });
   var matchers = _U.list([A2($RouteParser.$static,$System.Loading,"/loading")
                          ,A2($RouteParser.$static,$System.Home,"/")
                          ,A2($RouteParser.$static,$System.Users,"/users")
                          ,A2($RouteParser.$static,$System.UserAdd,"/users/add")
                          ,A4($RouteParser.dyn1,$System.User,"/users/",$RouteParser.$int,"")
                          ,A4($RouteParser.dyn1,$System.UserEdit,"/users/",$RouteParser.$int,"/edit")]);
   var view = F2(function (address,model) {
      var bind = function (view) {    return A2(view,address,model);};
      var debugIt = A2($Debug.log,"model",model);
      var _p1 = A2($RouteParser.match,matchers,model.route);
      if (_p1.ctor === "Nothing") {
            return $Html.text("404");
         } else {
            switch (_p1._0.ctor)
            {case "Loading": return $Html.text("loading, be patient");
               case "Home": return A2($Home.view,A2($Signal.forwardTo,address,$System.HomeForward),model.home);
               case "Users": return A2($Users.view,A2($Signal.forwardTo,address,$System.UsersForward),model.users);
               case "UserAdd": return $Html.text("add a user");
               case "User": return $Html.text(A2($Basics._op["++"],"hello user with id: ",$Basics.toString(_p1._0._0)));
               default: return $Html.text(A2($Basics._op["++"],"get user",$Basics.toString(_p1._0._0)));}
         }
   });
   var updateRoute = function (newRoute) {    return A2($RouteParser.match,matchers,newRoute);};
   var route = Elm.Native.Port.make(_elm).inboundSignal("route",
   "String",
   function (v) {
      return typeof v === "string" || typeof v === "object" && v instanceof String ? v : _U.badPort("a string",v);
   });
   var app = $StartApp.start({init: {ctor: "_Tuple2",_0: init,_1: $Effects.none}
                             ,update: update
                             ,view: view
                             ,inputs: _U.list([A2($Signal.map,$System.UpdateRouteString,route)])});
   var main = app.html;
   return _elm.RoutePlay.values = {_op: _op,matchers: matchers,view: view,update: update,updateRoute: updateRoute,app: app,main: main,init: init};
};