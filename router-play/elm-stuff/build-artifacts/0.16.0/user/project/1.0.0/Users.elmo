Elm.Users = Elm.Users || {};
Elm.Users.make = function (_elm) {
   "use strict";
   _elm.Users = _elm.Users || {};
   if (_elm.Users.values) return _elm.Users.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Http = Elm.Http.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var bootPage = function (act) {
      var decoder = $Json$Decode.list(A2($Json$Decode.object1,$Basics.identity,A2($Json$Decode._op[":="],"username",$Json$Decode.string)));
      return $Effects.task(A2($Task.map,act,$Task.toMaybe(A2($Http.get,decoder,"http://jsonplaceholder.typicode.com/users"))));
   };
   var init = {str: "",users: _U.list([])};
   var update = F2(function (action,model) {
      var _p0 = action;
      if (_p0.ctor === "DisplayLol") {
            return _U.update(model,{str: "lol"});
         } else {
            return model;
         }
   });
   var Model = F2(function (a,b) {    return {str: a,users: b};});
   var Receiver = function (a) {    return {ctor: "Receiver",_0: a};};
   var DisplayLol = {ctor: "DisplayLol"};
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("container")]),
      _U.list([$Html.text("user")
              ,A2($Html.button,_U.list([A2($Html$Events.onClick,address,DisplayLol)]),_U.list([]))
              ,$Html.text($Basics.toString(model.str))]));
   });
   return _elm.Users.values = {_op: _op,DisplayLol: DisplayLol,Receiver: Receiver,Model: Model,view: view,update: update,init: init,bootPage: bootPage};
};