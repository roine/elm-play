Elm.Spaceship = Elm.Spaceship || {};
Elm.Spaceship.make = function (_elm) {
   "use strict";
   _elm.Spaceship = _elm.Spaceship || {};
   if (_elm.Spaceship.values) return _elm.Spaceship.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var _op = {};
   var Tick = {ctor: "Tick"};
   var tick = A2($Signal.map,$Basics.always(Tick),$Time.fps(1));
   var Fire = function (a) {    return {ctor: "Fire",_0: a};};
   var fire = A2($Signal.sampleOn,$Time.fps(10),A2($Signal.map,Fire,$Keyboard.space));
   var Right = {ctor: "Right"};
   var Left = {ctor: "Left"};
   var NoOp = {ctor: "NoOp"};
   var direction = function () {
      var mapAction = function (x) {
         var _p0 = x;
         switch (_p0)
         {case -1: return Left;
            case 0: return NoOp;
            case 1: return Right;
            default: return _U.crashCase("Spaceship",{start: {line: 123,column: 7},end: {line: 127,column: 32}},_p0)("lol:");}
      };
      var delta = $Time.fps(60);
      return A2($Signal.sampleOn,delta,A2($Signal.map,mapAction,A2($Signal.map,function (_) {    return _.x;},$Keyboard.arrows)));
   }();
   var inputs = $Signal.mergeMany(_U.list([tick,direction,fire]));
   var shipSize = function (ship) {    return 30 * ($Basics.toFloat(ship.power) / 10 + 1);};
   var update = F2(function (action,ship) {
      var increase = ship.position + 10;
      var decrease = ship.position + -10;
      var reachedRight = _U.cmp(ship.position + 10,660 - shipSize(ship)) > -1;
      var reachedLeft = _U.cmp(ship.position + -10,-660 + shipSize(ship)) < 1;
      var width = 610;
      var _p2 = action;
      switch (_p2.ctor)
      {case "NoOp": return ship;
         case "Left": return ship.reachedLeft ? ship : _U.update(ship,{position: decrease,reachedLeft: reachedLeft,reachedRight: reachedRight});
         case "Right": return ship.reachedRight ? ship : _U.update(ship,{position: increase,reachedLeft: reachedLeft,reachedRight: reachedRight});
         case "Fire": var _p3 = _p2._0;
           var newPower = $Basics.not(_p3) ? ship.power : ship.power + 1;
           return _U.update(ship,{power: newPower,isFiring: _p3});
         default: var nextPower = _U.cmp(ship.power,0) < 1 || ship.isFiring ? ship.power : ship.power - 1;
           return _U.update(ship,{power: nextPower});}
   });
   var drawShip = F2(function (ship,gameHeight) {
      var paddingBottom = 3;
      var radius = shipSize(ship);
      return A2($Graphics$Collage.move,
      {ctor: "_Tuple2",_0: ship.position,_1: 0 - gameHeight / 2 + radius / 2 + paddingBottom},
      A2($Graphics$Collage.rotate,$Basics.degrees(90),A2($Graphics$Collage.filled,$Color.red,A2($Graphics$Collage.ngon,3,radius))));
   });
   var drawGame = F2(function (w,h) {    return A2($Graphics$Collage.filled,$Color.lightGrey,A2($Graphics$Collage.rect,w,h));});
   var view = F2(function (ship,_p4) {
      var _p5 = _p4;
      var _p8 = _p5._0;
      var _p7 = _p5._1;
      var debug = A2($Debug.watch,"position",ship.position);
      var _p6 = {ctor: "_Tuple2",_0: $Basics.toFloat(_p8),_1: $Basics.toFloat(_p7)};
      var w$ = _p6._0;
      var h$ = _p6._1;
      return A3($Graphics$Collage.collage,_p8,_p7,_U.list([A2(drawGame,w$,h$),A2(drawShip,ship,h$),$Graphics$Collage.toForm($Graphics$Element.show(ship))]));
   });
   var initialShip = {position: 0,isFiring: false,reachedLeft: false,reachedRight: false,power: 1};
   var model = A3($Signal.foldp,update,initialShip,inputs);
   var main = A3($Signal.map2,view,model,$Window.dimensions);
   var Ship = F5(function (a,b,c,d,e) {    return {position: a,isFiring: b,reachedLeft: c,reachedRight: d,power: e};});
   return _elm.Spaceship.values = {_op: _op
                                  ,Ship: Ship
                                  ,initialShip: initialShip
                                  ,view: view
                                  ,drawGame: drawGame
                                  ,drawShip: drawShip
                                  ,shipSize: shipSize
                                  ,NoOp: NoOp
                                  ,Left: Left
                                  ,Right: Right
                                  ,Fire: Fire
                                  ,Tick: Tick
                                  ,update: update
                                  ,inputs: inputs
                                  ,direction: direction
                                  ,fire: fire
                                  ,tick: tick
                                  ,model: model
                                  ,main: main};
};